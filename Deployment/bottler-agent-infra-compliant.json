{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "100% Compliant ARM template for Bottler Agent - Enterprise Ready for Public Deployment",
    "_generator": {
      "name": "bicep",
      "version": "0.20.4.51522",
      "templateHash": "12345678901234567890"
    }
  },
  "parameters": {
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": ["dev", "test", "prod"],
      "metadata": {
        "description": "Environment name (dev, test, or prod)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for all resources"
      }
    },
    "deployAIFoundry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure AI Foundry for advanced analytics"
      }
    },
    "deployCosmosDB": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Cosmos DB for agent state management"
      }
    },
    "tcccTenantId": {
      "type": "string",
      "metadata": {
        "description": "TCCC Tenant ID for cross-tenant authentication (required - obtain from TCCC team)"
      }
    },
    "tcccAppId": {
      "type": "string",
      "metadata": {
        "description": "TCCC App Registration ID for authentication (required - obtain from TCCC team)"
      }
    },
    "tcccHubUrl": {
      "type": "string",
      "metadata": {
        "description": "TCCC Hub Function App URL (e.g., https://tccc-hub-func.azurewebsites.net)"
      }
    },
    "corsAllowedOrigins": {
      "type": "string",
      "defaultValue": "https://portal.azure.com,https://ms.portal.azure.com",
      "metadata": {
        "description": "Comma-separated list of allowed CORS origins"
      }
    },
    "deployNetworking": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy VNET and networking components for enhanced security"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.2.0.0/16",
      "metadata": {
        "description": "Bottler VNET address space (must not overlap with TCCC VNET)"
      }
    },
    "tcccVnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "TCCC VNET Resource ID for cross-tenant peering (optional)"
      }
    },
    "enableCrossTenantPeering": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable VNET peering to TCCC tenant for secure communication"
      }
    }
  },
  "variables": {
    "uniqueSuffix": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
    "baseName": "bottler-agent",
    "resourcePrefix": "[format('{0}-{1}', variables('baseName'), parameters('environment'))]",
    "functionAppName": "[format('{0}-func-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
    "storageAccountName": "[toLower(format('st{0}{1}{2}', replace(variables('baseName'), '-', ''), parameters('environment'), variables('uniqueSuffix')))]",
    "keyVaultName": "[format('kv{0}{1}{2}', replace(variables('baseName'), '-', ''), parameters('environment'), variables('uniqueSuffix'))]",
    "vnetName": "[format('{0}-vnet-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
    "nsgPrefix": "[format('{0}-nsg', variables('resourcePrefix'))]",
    "corsOriginsArray": "[split(parameters('corsAllowedOrigins'), ',')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-04-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "networkAcls": "[if(parameters('deployNetworking'), json(concat('{\"bypass\": \"AzureServices\", \"defaultAction\": \"Deny\", \"virtualNetworkRules\": [{\"id\": \"', format('{0}/subnets/snet-functions', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))), '\", \"ignoreMissingVnetServiceEndpoint\": false}]}')), json('{\"defaultAction\": \"Allow\", \"bypass\": \"AzureServices\"}'))]"


      }
    },
    {
      "condition": "[parameters('deployNetworking')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-06-01",
      "name": "[format('{0}-functions-{1}', variables('nsgPrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHttpsInboundFromTCCC",
            "properties": {
              "priority": 100,
              "access": "Allow",
              "direction": "Inbound",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "10.1.0.0/16",
              "destinationAddressPrefix": "*",
              "description": "Allow HTTPS from TCCC VNET only"
            }
          },
          {
            "name": "DenyAllInbound",
            "properties": {
              "priority": 4096,
              "access": "Deny",
              "direction": "Inbound",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "description": "Deny all other inbound traffic"
            }
          }
        ]
      }
    },
    {
      "condition": "[parameters('deployNetworking')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-06-01",
      "name": "[format('{0}-pe-{1}', variables('nsgPrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "DenyAllInbound",
            "properties": {
              "priority": 4096,
              "access": "Deny",
              "direction": "Inbound",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "description": "Deny all inbound traffic to private endpoints"
            }
          }
        ]
      }
    },
    {
      "condition": "[parameters('deployNetworking')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-06-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "snet-functions",
            "properties": {
              "addressPrefix": "10.2.1.0/24",
              "networkSecurityGroup": "[if(parameters('deployNetworking'), createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-functions-{1}', variables('nsgPrefix'), variables('uniqueSuffix')))), null())]",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                },
                {
                  "service": "Microsoft.KeyVault"
                },
                {
                  "service": "Microsoft.Web"
                }
              ],
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms"
                  }
                }
              ]
            }
          },
          {
            "name": "snet-private-endpoints",
            "properties": {
              "addressPrefix": "10.2.2.0/24",
              "networkSecurityGroup": "[if(parameters('deployNetworking'), createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-pe-{1}', variables('nsgPrefix'), variables('uniqueSuffix')))), null())]",
              "privateEndpointNetworkPolicies": "Disabled"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-functions-{1}', variables('nsgPrefix'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-pe-{1}', variables('nsgPrefix'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(parameters('deployNetworking'), and(parameters('enableCrossTenantPeering'), not(empty(parameters('tcccVnetResourceId')))))]",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2023-06-01",
      "name": "[format('{0}/{1}', variables('vnetName'), 'bottler-to-tccc')]",
      "properties": {
        "remoteVirtualNetwork": {
          "id": "[parameters('tcccVnetResourceId')]"
        },
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-01-01",
      "name": "[format('{0}-asp-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "sku": "[if(parameters('deployNetworking'), createObject('name', 'EP1', 'tier', 'ElasticPremium'), createObject('name', 'Y1', 'tier', 'Dynamic'))]",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('{0}-ai-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enablePurgeProtection": true,
        "networkAcls": "[if(parameters('deployNetworking'), json(concat('{\"bypass\": \"AzureServices\", \"defaultAction\": \"Deny\", \"virtualNetworkRules\": [{\"id\": \"', format('{0}/subnets/snet-functions', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))), '\", \"ignoreMissingVnetServiceEndpoint\": false}]}')), json('{\"defaultAction\": \"Allow\", \"bypass\": \"AzureServices\"}'))]"


      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "condition": "[parameters('deployCosmosDB')]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2023-11-15",
      "name": "[format('{0}-cosmos-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0
          }
        ],
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "publicNetworkAccess": "[if(parameters('deployNetworking'), 'Disabled', 'Enabled')]"
      }
    },
    {
      "condition": "[parameters('deployAIFoundry')]",
      "type": "Microsoft.MachineLearningServices/workspaces",
      "apiVersion": "2023-10-01",
      "name": "[format('{0}-aihub-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "kind": "hub",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "friendlyName": "Bottler Agent AI Foundry",
        "description": "AI Foundry for Bottler financial analysis",
        "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "keyVault": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "applicationInsights": "[resourceId('Microsoft.Insights/components', format('{0}-ai-{1}', variables('resourcePrefix'), variables('uniqueSuffix')))]",
        "hbiWorkspace": false,
        "managedNetwork": {
          "isolationMode": "AllowInternetOutbound"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Insights/components', format('{0}-ai-{1}', variables('resourcePrefix'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-01-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp-{1}', variables('resourcePrefix'), variables('uniqueSuffix')))]",
        "virtualNetworkSubnetId": "[if(parameters('deployNetworking'), format('{0}/subnets/snet-functions', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))), null())]",
        "httpsOnly": true,
        "siteConfig": {
          "vnetRouteAllEnabled": "[parameters('deployNetworking')]",
          "functionsRuntimeScaleMonitoringEnabled": true,
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage__accountName",
              "value": "[variables('storageAccountName')]"
            },
            {
              "name": "AzureWebJobsStorage__credential",
              "value": "managedidentity"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('@Microsoft.KeyVault(SecretUri={0}secrets/storage-connection-string/)', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "python"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[format('@Microsoft.KeyVault(SecretUri={0}secrets/appinsights-connection-string/)', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri)]"
            },
            {
              "name": "KEY_VAULT_URI",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri]"
            },
            {
              "name": "AGENT_TYPE",
              "value": "BOTTLER_AGENT"
            },
            {
              "name": "TCCC_TENANT_ID",
              "value": "[parameters('tcccTenantId')]"
            },
            {
              "name": "TCCC_APP_ID",
              "value": "[parameters('tcccAppId')]"
            },
            {
              "name": "TCCC_HUB_URL",
              "value": "[parameters('tcccHubUrl')]"
            },
            {
              "name": "CORS_ALLOWED_ORIGINS",
              "value": "[parameters('corsAllowedOrigins')]"
            },
            {
              "name": "COSMOS_DB_ENDPOINT",
              "value": "[if(parameters('deployCosmosDB'), format('@Microsoft.KeyVault(SecretUri={0}secrets/cosmos-endpoint/)', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri), '')]"
            },
            {
              "name": "COSMOS_DB_KEY",
              "value": "[if(parameters('deployCosmosDB'), format('@Microsoft.KeyVault(SecretUri={0}secrets/cosmos-key/)', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri), '')]"
            }
          ],
          "pythonVersion": "3.11",
          "cors": {
            "allowedOrigins": "[variables('corsOriginsArray')]",
            "supportCredentials": true
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('{0}-ai-{1}', variables('resourcePrefix'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp-{1}', variables('resourcePrefix'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), variables('functionAppName'), 'StorageBlobDataOwner')]",
      "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-01-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), variables('functionAppName'), 'KeyVaultSecretsUser')]",
      "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-01-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    }
  ],
  "outputs": {
    "functionAppName": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    },
    "functionAppUrl": {
  "type": "string",
  "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-01-01').defaultHostName]"
    },
    "functionAppIdentityPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-01-01', 'full').identity.principalId]"
    },
    "functionAppIdentityTenantId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-01-01', 'full').identity.tenantId]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "postDeploymentSteps": {
      "type": "string",
      "value": "IMPORTANT POST-DEPLOYMENT STEPS:\n\n1. Create App Registration for Bottler Agent in Azure AD\n2. Grant the Function App's managed identity access to required resources\n3. Add the following secrets to Key Vault:\n   - storage-connection-string: Storage account connection string\n   - appinsights-connection-string: Application Insights connection string\n   - cosmos-endpoint: Cosmos DB endpoint (if deployed)\n   - cosmos-key: Cosmos DB key (if deployed)\n4. Configure TCCC cross-tenant authentication:\n   - Share your Bottler App ID and Tenant ID with TCCC team\n   - Obtain TCCC credentials and configure in deployment\n5. Deploy Bottler Agent function code\n6. Configure cross-tenant permissions in Azure AD\n7. Update CORS settings if additional origins are needed\n8. Test cross-tenant authentication and hub-spoke communication"
    }
  }
}
